services:
  db:
    image: postgres:15-alpine
    container_name: weather_db
    env_file:
      - ../.env
    environment:
      POSTGRES_DB: weather_service
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: weather_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weather_user -d weather_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: weather_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: weather_redisinsight
    volumes:
      - ./redisinsight-data:/db
    ports:
      - "5540:5540"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5540/"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - redis

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: weather_api
    env_file:
      - ../.env
    environment:
      - DEBUG=1
      - DB_HOST=db
      - DB_NAME=weather_service
      - DB_USER=weather_user
      - DB_PASSWORD=weather_pass
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ..:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: weather_celery
    env_file:
      - ../.env
    environment:
      - DEBUG=1
      - DB_HOST=db
      - DB_NAME=weather_service
      - DB_USER=weather_user
      - DB_PASSWORD=weather_pass
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ..:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A weather_service worker -l info

  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: weather_celery_beat
    env_file:
      - ../.env
    environment:
      - DEBUG=1
      - DB_HOST=db
      - DB_NAME=weather_service
      - DB_USER=weather_user
      - DB_PASSWORD=weather_pass
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ..:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A weather_service beat -l info

  prometheus:
    image: prom/prometheus:latest
    container_name: weather_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: weather_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  redisinsight_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: weather_network
